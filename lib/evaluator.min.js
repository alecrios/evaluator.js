!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("evaluator",[],t):"object"==typeof exports?exports.evaluator=t():e.evaluator=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=((n=r(1))&&n.__esModule?n:{default:n}).default;t.default=o,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=s(r(2)),o=s(r(4)),i=s(r(5));function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.symbols={"^":{infix:"EXP"},"*":{infix:"MUL"},"/":{infix:"DIV"},"%":{infix:"MOD"},"+":{infix:"ADD",prefix:"POS"},"-":{infix:"SUB",prefix:"NEG"}},this.operators={EXP:new i.default("EXP",4,"right",function(e,t){return Math.pow(e,t)}),POS:new i.default("POS",3,"right",function(e){return e}),NEG:new i.default("NEG",3,"right",function(e){return-e}),MUL:new i.default("MUL",2,"left",function(e,t){return e*t}),DIV:new i.default("DIV",2,"left",function(e,t){return e/t}),MOD:new i.default("MOD",2,"left",function(e,t){return e%t}),ADD:new i.default("ADD",1,"left",function(e,t){return e+t}),SUB:new i.default("SUB",1,"left",function(e,t){return e-t})},this.constants={E:new o.default("E",Math.E),PI:new o.default("PI",Math.PI)},this.numbers=/(\d+\.\d*)|(\d*\.\d+)|(\d+)/,this.openParenthesis="(",this.closeParenthesis=")",this.whitespace=/\s/}var t,r,s;return t=e,(r=[{key:"isSymbol",value:function(e){return Object.prototype.hasOwnProperty.call(this.symbols,e)}},{key:"isOperator",value:function(e){return Object.prototype.hasOwnProperty.call(this.operators,e)}},{key:"isConstant",value:function(e){return Object.prototype.hasOwnProperty.call(this.constants,e)}},{key:"isNumber",value:function(e){return this.numbers.test(e)}},{key:"isOpenParenthesis",value:function(e){return e===this.openParenthesis}},{key:"isCloseParenthesis",value:function(e){return e===this.closeParenthesis}},{key:"isWhitespace",value:function(e){return this.whitespace.test(e)}},{key:"topOperatorHasPrecedence",value:function(e,t){if(!e.length)return!1;var r=e[e.length-1];if(!this.isOperator(r))return!1;var n=this.operators[r];return!(1===t.method.length&&n.method.length>1)&&(n.hasGreaterPrecedence(t)||n.hasEqualPrecedence(t)&&n.isLeftAssociative())}},{key:"determineOperator",value:function(e,t){var r;return void 0===t||this.isOpenParenthesis(t)||this.isSymbol(t)?r="prefix":(this.isCloseParenthesis(t)||this.isNumber(t)||this.isConstant(t))&&(r="infix"),this.operators[this.symbols[e][r]]}},{key:"parse",value:function(e){var t=this;if(!e.length)throw Error("No input");return(e.match(/(\d+\.\d*)|(\d*\.\d+)|(\d+)|([a-zA-Z]+)|(.)/g)||[]).filter(function(e){return!t.isWhitespace(e)}).map(function(e){return e.toUpperCase()})}},{key:"convert",value:function(e){var t=this;if(!e.length)throw Error("No valid tokens");var r=[],n=[];for(e.forEach(function(o,i){if(t.isNumber(o))n.push(parseFloat(o));else if(t.isConstant(o))n.push(t.constants[o].name);else if(t.isSymbol(o)){var s=t.determineOperator(o,e[i-1]);if(void 0===s)throw Error("Misused operator: ".concat(o));for(;t.topOperatorHasPrecedence(r,s);)n.push(r.pop());r.push(s.name)}else if(t.isOpenParenthesis(o))r.push(o);else{if(!t.isCloseParenthesis(o))throw Error("Invalid token: ".concat(o));for(;!t.isOpenParenthesis(r[r.length-1]);){if(!r.length)throw Error("Mismatched parentheses");n.push(r.pop())}r.pop()}});r.length;){var o=r[r.length-1];if(this.isOpenParenthesis(o)||this.isCloseParenthesis(o))throw Error("Mismatched parentheses");n.push(r.pop())}return n}},{key:"resolve",value:function(e){var t=this;if(!e.length)throw Error("No operations");var r=[];if(e.forEach(function(e){if(t.isNumber(e))r.push(e);else if(t.isConstant(e))r.push(t.constants[e].value);else{var n=t.operators[e];if(r.length<n.method.length)throw Error("Missing operand");if("DIV"===n.name&&0===r[1])throw Error("Division by zero");var o=n.method.apply(n,u(r.splice(-n.method.length)));r.push(o)}}),r.length>1)throw Error("Missing operator");var o=r[0];return(0,n.default)(o,8)}},{key:"evaluate",value:function(e){try{var t=this.parse(e),r=this.convert(t);return this.resolve(r)}catch(e){throw e}}}])&&a(t.prototype,r),s&&a(t,s),e}();t.default=f,e.exports=t.default},function(e,t,r){(function(t){var r=1/0,n=1.7976931348623157e308,o=NaN,i="[object Symbol]",s=/^\s+|\s+$/g,u=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,f=/^0o[0-7]+$/i,c=parseInt,l="object"==typeof t&&t&&t.Object===Object&&t,p="object"==typeof self&&self&&self.Object===Object&&self,h=l||p||Function("return this")(),d=Object.prototype.toString,v=h.Symbol,y=Math.min,b=v?v.prototype:void 0,m=b?b.toString:void 0;function O(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function w(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&d.call(e)==i}function P(e){if("number"==typeof e)return e;if(w(e))return o;if(O(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=O(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(s,"");var r=a.test(e);return r||f.test(e)?c(e.slice(2),r?2:8):u.test(e)?o:+e}function g(e){return null==e?"":function(e){if("string"==typeof e)return e;if(w(e))return m?m.call(e):"";var t=e+"";return"0"==t&&1/e==-r?"-0":t}(e)}var j,E=(j=Math["round"],function(e,t){if(e=P(e),t=y(function(e){var t=function(e){if(!e)return 0===e?e:0;if((e=P(e))===r||e===-r){var t=e<0?-1:1;return t*n}return e==e?e:0}(e),o=t%1;return t==t?o?t-o:t:0}(t),292)){var o=(g(e)+"e").split("e");return+((o=(g(j(o[0]+"e"+(+o[1]+t)))+"e").split("e"))[0]+"e"+(+o[1]-t))}return j(e)});e.exports=E}).call(this,r(3))},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.value=r},e.exports=t.default},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(t,r,n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.precedence=r,this.associativity=n,this.method=o}var t,r,o;return t=e,(r=[{key:"hasEqualPrecedence",value:function(e){return this.precedence===e.precedence}},{key:"hasGreaterPrecedence",value:function(e){return this.precedence>e.precedence}},{key:"isLeftAssociative",value:function(){return"left"===this.associativity}}])&&n(t.prototype,r),o&&n(t,o),e}();t.default=o,e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,